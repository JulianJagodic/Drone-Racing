# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pycffirmware
else:
    import _pycffirmware

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class collision_avoidance_params_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ellipsoidRadii = property(_pycffirmware.collision_avoidance_params_t_ellipsoidRadii_get, _pycffirmware.collision_avoidance_params_t_ellipsoidRadii_set)
    bboxMin = property(_pycffirmware.collision_avoidance_params_t_bboxMin_get, _pycffirmware.collision_avoidance_params_t_bboxMin_set)
    bboxMax = property(_pycffirmware.collision_avoidance_params_t_bboxMax_get, _pycffirmware.collision_avoidance_params_t_bboxMax_set)
    horizonSecs = property(_pycffirmware.collision_avoidance_params_t_horizonSecs_get, _pycffirmware.collision_avoidance_params_t_horizonSecs_set)
    maxSpeed = property(_pycffirmware.collision_avoidance_params_t_maxSpeed_get, _pycffirmware.collision_avoidance_params_t_maxSpeed_set)
    sidestepThreshold = property(_pycffirmware.collision_avoidance_params_t_sidestepThreshold_get, _pycffirmware.collision_avoidance_params_t_sidestepThreshold_set)
    maxPeerLocAgeMillis = property(_pycffirmware.collision_avoidance_params_t_maxPeerLocAgeMillis_get, _pycffirmware.collision_avoidance_params_t_maxPeerLocAgeMillis_set)
    voronoiProjectionTolerance = property(_pycffirmware.collision_avoidance_params_t_voronoiProjectionTolerance_get, _pycffirmware.collision_avoidance_params_t_voronoiProjectionTolerance_set)
    voronoiProjectionMaxIters = property(_pycffirmware.collision_avoidance_params_t_voronoiProjectionMaxIters_get, _pycffirmware.collision_avoidance_params_t_voronoiProjectionMaxIters_set)

    def __init__(self):
        _pycffirmware.collision_avoidance_params_t_swiginit(self, _pycffirmware.new_collision_avoidance_params_t())
    __swig_destroy__ = _pycffirmware.delete_collision_avoidance_params_t

# Register collision_avoidance_params_t in _pycffirmware:
_pycffirmware.collision_avoidance_params_t_swigregister(collision_avoidance_params_t)
class collision_avoidance_state_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lastFeasibleSetPosition = property(_pycffirmware.collision_avoidance_state_t_lastFeasibleSetPosition_get, _pycffirmware.collision_avoidance_state_t_lastFeasibleSetPosition_set)

    def __init__(self):
        _pycffirmware.collision_avoidance_state_t_swiginit(self, _pycffirmware.new_collision_avoidance_state_t())
    __swig_destroy__ = _pycffirmware.delete_collision_avoidance_state_t

# Register collision_avoidance_state_t in _pycffirmware:
_pycffirmware.collision_avoidance_state_t_swigregister(collision_avoidance_state_t)

def collisionAvoidanceUpdateSetpointCore(params, collisionState, nOthers, otherPositions, workspace, setpoint, sensorData, state):
    return _pycffirmware.collisionAvoidanceUpdateSetpointCore(params, collisionState, nOthers, otherPositions, workspace, setpoint, sensorData, state)
M_PI_F = _pycffirmware.M_PI_F
M_1_PI_F = _pycffirmware.M_1_PI_F
M_PI_2_F = _pycffirmware.M_PI_2_F

def fsqr(x):
    return _pycffirmware.fsqr(x)

def radians(degrees):
    return _pycffirmware.radians(degrees)

def degrees(radians):
    return _pycffirmware.degrees(radians)

def clamp(value, min, max):
    return _pycffirmware.clamp(value, min, max)

def fcloseulps(a, b, ulps):
    return _pycffirmware.fcloseulps(a, b, ulps)
class vec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pycffirmware.vec_x_get, _pycffirmware.vec_x_set)
    y = property(_pycffirmware.vec_y_get, _pycffirmware.vec_y_set)
    z = property(_pycffirmware.vec_z_get, _pycffirmware.vec_z_set)

    def __init__(self, x):
        _pycffirmware.vec_swiginit(self, _pycffirmware.new_vec(x))
    __swig_destroy__ = _pycffirmware.delete_vec

    def __repr__(self):
        return "({}, {}, {})".format(self.x, self.y, self.z)

    def __array__(self):
        return np.array([self.x, self.y, self.z])

    def __len__(self):
        return 3

    def __getitem__(self, i):
        if 0 <= i and i < 3:
            return _cffirmware.vindex(self, i)
        else:
            raise IndexError("vec index must be in {0, 1, 2}.")

    # Unary operator overloads.
    def __neg__(self):
        return _cffirmware.vneg(self)

    # Vector-scalar binary operator overloads.
    def __rmul__(self, s):
        return _cffirmware.vscl(s, self)

    def __div__(self, s):
        return self.__truediv__(s)

    def __truediv__(self, s):
        return _cffirmware.vdiv(self, s)

    # Vector-vector binary operator overloads.
    def __add__(self, other):
        return _cffirmware.vadd(self, other)

    def __sub__(self, other):
        return _cffirmware.vsub(self, other)


# Register vec in _pycffirmware:
_pycffirmware.vec_swigregister(vec)

def mkvec(x, y, z):
    return _pycffirmware.mkvec(x, y, z)

def vrepeat(x):
    return _pycffirmware.vrepeat(x)

def vzero():
    return _pycffirmware.vzero()

def vbasis(i):
    return _pycffirmware.vbasis(i)

def vscl(s, v):
    return _pycffirmware.vscl(s, v)

def vneg(v):
    return _pycffirmware.vneg(v)

def vdiv(v, s):
    return _pycffirmware.vdiv(v, s)

def vadd(a, b):
    return _pycffirmware.vadd(a, b)

def vsub(a, b):
    return _pycffirmware.vsub(a, b)

def vdot(a, b):
    return _pycffirmware.vdot(a, b)

def veltmul(a, b):
    return _pycffirmware.veltmul(a, b)

def veltdiv(a, b):
    return _pycffirmware.veltdiv(a, b)

def veltrecip(a):
    return _pycffirmware.veltrecip(a)

def vmag2(v):
    return _pycffirmware.vmag2(v)

def vmag(v):
    return _pycffirmware.vmag(v)

def vdist2(a, b):
    return _pycffirmware.vdist2(a, b)

def vdist(a, b):
    return _pycffirmware.vdist(a, b)

def vnormalize(v):
    return _pycffirmware.vnormalize(v)

def vclampnorm(v, maxnorm):
    return _pycffirmware.vclampnorm(v, maxnorm)

def vcross(a, b):
    return _pycffirmware.vcross(a, b)

def vprojectunit(a, b_unit):
    return _pycffirmware.vprojectunit(a, b_unit)

def vorthunit(a, b_unit):
    return _pycffirmware.vorthunit(a, b_unit)

def vabs(v):
    return _pycffirmware.vabs(v)

def vmin(a, b):
    return _pycffirmware.vmin(a, b)

def vmax(a, b):
    return _pycffirmware.vmax(a, b)

def vclamp(v, lower, upper):
    return _pycffirmware.vclamp(v, lower, upper)

def vclampabs(v, abs_upper):
    return _pycffirmware.vclampabs(v, abs_upper)

def vmaxelt(v):
    return _pycffirmware.vmaxelt(v)

def vminelt(v):
    return _pycffirmware.vminelt(v)

def vnorm1(v):
    return _pycffirmware.vnorm1(v)

def veq(a, b):
    return _pycffirmware.veq(a, b)

def vneq(a, b):
    return _pycffirmware.vneq(a, b)

def veqepsilon(a, b, epsilon):
    return _pycffirmware.veqepsilon(a, b, epsilon)

def vless(a, b):
    return _pycffirmware.vless(a, b)

def vleq(a, b):
    return _pycffirmware.vleq(a, b)

def vgreater(a, b):
    return _pycffirmware.vgreater(a, b)

def vgeq(a, b):
    return _pycffirmware.vgeq(a, b)

def visnan(v):
    return _pycffirmware.visnan(v)

def vadd3(a, b, c):
    return _pycffirmware.vadd3(a, b, c)

def vadd4(a, b, c, d):
    return _pycffirmware.vadd4(a, b, c, d)

def vsub2(a, b, c):
    return _pycffirmware.vsub2(a, b, c)

def vload(d):
    return _pycffirmware.vload(d)

def vstore(v, d):
    return _pycffirmware.vstore(v, d)

def vloadf(f):
    return _pycffirmware.vloadf(f)

def vstoref(v, f):
    return _pycffirmware.vstoref(v, f)

def vindex(v, i):
    return _pycffirmware.vindex(v, i)
class mat33(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m = property(_pycffirmware.mat33_m_get, _pycffirmware.mat33_m_set)

    def __init__(self):
        _pycffirmware.mat33_swiginit(self, _pycffirmware.new_mat33())
    __swig_destroy__ = _pycffirmware.delete_mat33

# Register mat33 in _pycffirmware:
_pycffirmware.mat33_swigregister(mat33)

def mzero():
    return _pycffirmware.mzero()

def mdiag(a, b, c):
    return _pycffirmware.mdiag(a, b, c)

def meyescl(a):
    return _pycffirmware.meyescl(a)

def meye():
    return _pycffirmware.meye()

def mcolumns(a, b, c):
    return _pycffirmware.mcolumns(a, b, c)

def mrows(a, b, c):
    return _pycffirmware.mrows(a, b, c)

def mcrossmat(v):
    return _pycffirmware.mcrossmat(v)

def mcolumn(m, col):
    return _pycffirmware.mcolumn(m, col)

def mrow(m, row):
    return _pycffirmware.mrow(m, row)

def mtranspose(m):
    return _pycffirmware.mtranspose(m)

def mscl(s, a):
    return _pycffirmware.mscl(s, a)

def mneg(a):
    return _pycffirmware.mneg(a)

def madd(a, b):
    return _pycffirmware.madd(a, b)

def msub(a, b):
    return _pycffirmware.msub(a, b)

def mvmul(a, v):
    return _pycffirmware.mvmul(a, v)

def mmul(a, b):
    return _pycffirmware.mmul(a, b)

def maddridge(a, d):
    return _pycffirmware.maddridge(a, d)

def misnan(m):
    return _pycffirmware.misnan(m)

def set_block33_rowmaj(block, stride, m):
    return _pycffirmware.set_block33_rowmaj(block, stride, m)

def madd3(a, b, c):
    return _pycffirmware.madd3(a, b, c)

def maxisangle(axis, angle):
    return _pycffirmware.maxisangle(axis, angle)

def mrotx(angle):
    return _pycffirmware.mrotx(angle)

def mroty(angle):
    return _pycffirmware.mroty(angle)

def mrotz(angle):
    return _pycffirmware.mrotz(angle)
class quat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pycffirmware.quat_x_get, _pycffirmware.quat_x_set)
    y = property(_pycffirmware.quat_y_get, _pycffirmware.quat_y_set)
    z = property(_pycffirmware.quat_z_get, _pycffirmware.quat_z_set)
    w = property(_pycffirmware.quat_w_get, _pycffirmware.quat_w_set)

    def __init__(self):
        _pycffirmware.quat_swiginit(self, _pycffirmware.new_quat())
    __swig_destroy__ = _pycffirmware.delete_quat

# Register quat in _pycffirmware:
_pycffirmware.quat_swigregister(quat)

def mkquat(x, y, z, w):
    return _pycffirmware.mkquat(x, y, z, w)

def quatvw(v, w):
    return _pycffirmware.quatvw(v, w)

def qeye():
    return _pycffirmware.qeye()

def qaxisangle(axis, angle):
    return _pycffirmware.qaxisangle(axis, angle)

def qnormalize(q):
    return _pycffirmware.qnormalize(q)

def qvectovec(a, b):
    return _pycffirmware.qvectovec(a, b)

def rpy2quat(rpy):
    return _pycffirmware.rpy2quat(rpy)

def rpy2quat_small(rpy):
    return _pycffirmware.rpy2quat_small(rpy)

def mat2quat(m):
    return _pycffirmware.mat2quat(m)

def quat2rpy(q):
    return _pycffirmware.quat2rpy(q)

def quat2axis(q):
    return _pycffirmware.quat2axis(q)

def quat2angle(q):
    return _pycffirmware.quat2angle(q)

def quatimagpart(q):
    return _pycffirmware.quatimagpart(q)

def quat2rotmat(q):
    return _pycffirmware.quat2rotmat(q)

def qvrot(q, v):
    return _pycffirmware.qvrot(q, v)

def qqmul(q, p):
    return _pycffirmware.qqmul(q, p)

def qinv(q):
    return _pycffirmware.qinv(q)

def qneg(q):
    return _pycffirmware.qneg(q)

def qposreal(q):
    return _pycffirmware.qposreal(q)

def qdot(a, b):
    return _pycffirmware.qdot(a, b)

def qanglebetween(a, b):
    return _pycffirmware.qanglebetween(a, b)

def qeq(a, b):
    return _pycffirmware.qeq(a, b)

def quat_gyro_update(quat, gyro, dt):
    return _pycffirmware.quat_gyro_update(quat, gyro, dt)

def qnlerp(a, b, t):
    return _pycffirmware.qnlerp(a, b, t)

def qslerp(a, b, t):
    return _pycffirmware.qslerp(a, b, t)

def qload(d):
    return _pycffirmware.qload(d)

def qstore(q, d):
    return _pycffirmware.qstore(q, d)

def qloadf(f):
    return _pycffirmware.qloadf(f)

def qstoref(q, f):
    return _pycffirmware.qstoref(q, f)

def vprojecthalfspace(x, a_unit, b):
    return _pycffirmware.vprojecthalfspace(x, a_unit, b)

def vinpolytope(v, A, b, n, tolerance):
    return _pycffirmware.vinpolytope(v, A, b, n, tolerance)

def rayintersectpolytope(origin, direction, A, b, n, active_row):
    return _pycffirmware.rayintersectpolytope(origin, direction, A, b, n, active_row)

def vprojectpolytope(v, A, b, work, n, tolerance, maxiters):
    return _pycffirmware.vprojectpolytope(v, A, b, work, n, tolerance, maxiters)
PP_DEGREE = _pycffirmware.PP_DEGREE
PP_SIZE = _pycffirmware.PP_SIZE

def polyval(p, t):
    return _pycffirmware.polyval(p, t)

def polylinear(p, duration, x0, x1):
    return _pycffirmware.polylinear(p, duration, x0, x1)

def polybezier(p, duration, x, dim):
    return _pycffirmware.polybezier(p, duration, x, dim)

def poly5(poly, T, x0, dx0, ddx0, xf, dxf, ddxf):
    return _pycffirmware.poly5(poly, T, x0, dx0, ddx0, xf, dxf, ddxf)

def polyscale(p, s):
    return _pycffirmware.polyscale(p, s)

def polyder(p):
    return _pycffirmware.polyder(p)

def polystretchtime(p, s):
    return _pycffirmware.polystretchtime(p, s)

def polyreflect(p):
    return _pycffirmware.polyreflect(p)
class poly4d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    p = property(_pycffirmware.poly4d_p_get, _pycffirmware.poly4d_p_set)
    duration = property(_pycffirmware.poly4d_duration_get, _pycffirmware.poly4d_duration_set)

    def __init__(self):
        _pycffirmware.poly4d_swiginit(self, _pycffirmware.new_poly4d())
    __swig_destroy__ = _pycffirmware.delete_poly4d

# Register poly4d in _pycffirmware:
_pycffirmware.poly4d_swigregister(poly4d)

def poly4d_zero(duration):
    return _pycffirmware.poly4d_zero(duration)

def poly4d_linear(duration, p0, p1, yaw0, yaw1):
    return _pycffirmware.poly4d_linear(duration, p0, p1, yaw0, yaw1)

def poly4d_scale(p, x, y, z, yaw):
    return _pycffirmware.poly4d_scale(p, x, y, z, yaw)

def poly4d_shift(p, x, y, z, yaw):
    return _pycffirmware.poly4d_shift(p, x, y, z, yaw)

def poly4d_shift_vec(p, pos, yaw):
    return _pycffirmware.poly4d_shift_vec(p, pos, yaw)

def poly4d_stretchtime(p, s):
    return _pycffirmware.poly4d_stretchtime(p, s)

def polyder4d(p):
    return _pycffirmware.polyder4d(p)

def poly4d_max_accel_approx(p):
    return _pycffirmware.poly4d_max_accel_approx(p)
class traj_eval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pos = property(_pycffirmware.traj_eval_pos_get, _pycffirmware.traj_eval_pos_set)
    vel = property(_pycffirmware.traj_eval_vel_get, _pycffirmware.traj_eval_vel_set)
    acc = property(_pycffirmware.traj_eval_acc_get, _pycffirmware.traj_eval_acc_set)
    omega = property(_pycffirmware.traj_eval_omega_get, _pycffirmware.traj_eval_omega_set)
    yaw = property(_pycffirmware.traj_eval_yaw_get, _pycffirmware.traj_eval_yaw_set)

    def __init__(self, x):
        _pycffirmware.traj_eval_swiginit(self, _pycffirmware.new_traj_eval(x))
    __swig_destroy__ = _pycffirmware.delete_traj_eval

# Register traj_eval in _pycffirmware:
_pycffirmware.traj_eval_swigregister(traj_eval)

def traj_eval_zero():
    return _pycffirmware.traj_eval_zero()

def traj_eval_invalid():
    return _pycffirmware.traj_eval_invalid()

def is_traj_eval_valid(ev):
    return _pycffirmware.is_traj_eval_valid(ev)

def poly4d_eval(p, t):
    return _pycffirmware.poly4d_eval(p, t)
class piecewise_traj(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    t_begin = property(_pycffirmware.piecewise_traj_t_begin_get, _pycffirmware.piecewise_traj_t_begin_set)
    timescale = property(_pycffirmware.piecewise_traj_timescale_get, _pycffirmware.piecewise_traj_timescale_set)
    shift = property(_pycffirmware.piecewise_traj_shift_get, _pycffirmware.piecewise_traj_shift_set)
    n_pieces = property(_pycffirmware.piecewise_traj_n_pieces_get, _pycffirmware.piecewise_traj_n_pieces_set)
    pieces = property(_pycffirmware.piecewise_traj_pieces_get, _pycffirmware.piecewise_traj_pieces_set)

    def __init__(self):
        _pycffirmware.piecewise_traj_swiginit(self, _pycffirmware.new_piecewise_traj())
    __swig_destroy__ = _pycffirmware.delete_piecewise_traj

# Register piecewise_traj in _pycffirmware:
_pycffirmware.piecewise_traj_swigregister(piecewise_traj)

def piecewise_duration(pp):
    return _pycffirmware.piecewise_duration(pp)

def piecewise_plan_5th_order(p, duration, p0, y0, v0, dy0, a0, p1, y1, v1, dy1, a1):
    return _pycffirmware.piecewise_plan_5th_order(p, duration, p0, y0, v0, dy0, a0, p1, y1, v1, dy1, a1)

def piecewise_plan_7th_order_no_jerk(p, duration, p0, y0, v0, dy0, a0, p1, y1, v1, dy1, a1):
    return _pycffirmware.piecewise_plan_7th_order_no_jerk(p, duration, p0, y0, v0, dy0, a0, p1, y1, v1, dy1, a1)

def piecewise_eval(traj, t):
    return _pycffirmware.piecewise_eval(traj, t)

def piecewise_eval_reversed(traj, t):
    return _pycffirmware.piecewise_eval_reversed(traj, t)

def piecewise_is_finished(traj, t):
    return _pycffirmware.piecewise_is_finished(traj, t)
TRAJECTORY_STATE_IDLE = _pycffirmware.TRAJECTORY_STATE_IDLE
TRAJECTORY_STATE_FLYING = _pycffirmware.TRAJECTORY_STATE_FLYING
TRAJECTORY_STATE_LANDING = _pycffirmware.TRAJECTORY_STATE_LANDING
TRAJECTORY_TYPE_PIECEWISE = _pycffirmware.TRAJECTORY_TYPE_PIECEWISE
TRAJECTORY_TYPE_PIECEWISE_COMPRESSED = _pycffirmware.TRAJECTORY_TYPE_PIECEWISE_COMPRESSED
class planner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_pycffirmware.planner_state_get, _pycffirmware.planner_state_set)
    type = property(_pycffirmware.planner_type_get, _pycffirmware.planner_type_set)
    reversed = property(_pycffirmware.planner_reversed_get, _pycffirmware.planner_reversed_set)
    trajectory = property(_pycffirmware.planner_trajectory_get, _pycffirmware.planner_trajectory_set)
    compressed_trajectory = property(_pycffirmware.planner_compressed_trajectory_get, _pycffirmware.planner_compressed_trajectory_set)
    planned_trajectory = property(_pycffirmware.planner_planned_trajectory_get, _pycffirmware.planner_planned_trajectory_set)
    pieces = property(_pycffirmware.planner_pieces_get, _pycffirmware.planner_pieces_set)

    def __init__(self):
        _pycffirmware.planner_swiginit(self, _pycffirmware.new_planner())
    __swig_destroy__ = _pycffirmware.delete_planner

# Register planner in _pycffirmware:
_pycffirmware.planner_swigregister(planner)

def plan_init(p):
    return _pycffirmware.plan_init(p)

def plan_stop(p):
    return _pycffirmware.plan_stop(p)

def plan_is_stopped(p):
    return _pycffirmware.plan_is_stopped(p)

def plan_current_goal(p, t):
    return _pycffirmware.plan_current_goal(p, t)

def plan_takeoff(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration, t):
    return _pycffirmware.plan_takeoff(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration, t)

def plan_land(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration, t):
    return _pycffirmware.plan_land(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration, t)

def plan_go_to(p, relative, hover_pos, hover_yaw, duration, t):
    return _pycffirmware.plan_go_to(p, relative, hover_pos, hover_yaw, duration, t)

def plan_go_to_from(p, curr_eval, relative, hover_pos, hover_yaw, duration, t):
    return _pycffirmware.plan_go_to_from(p, curr_eval, relative, hover_pos, hover_yaw, duration, t)

def plan_start_trajectory(p, trajectory, reversed):
    return _pycffirmware.plan_start_trajectory(p, trajectory, reversed)

def plan_start_compressed_trajectory(p, trajectory):
    return _pycffirmware.plan_start_compressed_trajectory(p, trajectory)

def plan_is_finished(p, t):
    return _pycffirmware.plan_is_finished(p, t)
class attitude_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_pycffirmware.attitude_t_timestamp_get, _pycffirmware.attitude_t_timestamp_set)
    roll = property(_pycffirmware.attitude_t_roll_get, _pycffirmware.attitude_t_roll_set)
    pitch = property(_pycffirmware.attitude_t_pitch_get, _pycffirmware.attitude_t_pitch_set)
    yaw = property(_pycffirmware.attitude_t_yaw_get, _pycffirmware.attitude_t_yaw_set)

    def __init__(self):
        _pycffirmware.attitude_t_swiginit(self, _pycffirmware.new_attitude_t())
    __swig_destroy__ = _pycffirmware.delete_attitude_t

# Register attitude_t in _pycffirmware:
_pycffirmware.attitude_t_swigregister(attitude_t)
vec3d_size = _pycffirmware.vec3d_size
class vec3_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_pycffirmware.vec3_s_timestamp_get, _pycffirmware.vec3_s_timestamp_set)
    x = property(_pycffirmware.vec3_s_x_get, _pycffirmware.vec3_s_x_set)
    y = property(_pycffirmware.vec3_s_y_get, _pycffirmware.vec3_s_y_set)
    z = property(_pycffirmware.vec3_s_z_get, _pycffirmware.vec3_s_z_set)

    def __init__(self):
        _pycffirmware.vec3_s_swiginit(self, _pycffirmware.new_vec3_s())
    __swig_destroy__ = _pycffirmware.delete_vec3_s

# Register vec3_s in _pycffirmware:
_pycffirmware.vec3_s_swigregister(vec3_s)
class quaternion_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_pycffirmware.quaternion_t_timestamp_get, _pycffirmware.quaternion_t_timestamp_set)
    q0 = property(_pycffirmware.quaternion_t_q0_get, _pycffirmware.quaternion_t_q0_set)
    q1 = property(_pycffirmware.quaternion_t_q1_get, _pycffirmware.quaternion_t_q1_set)
    q2 = property(_pycffirmware.quaternion_t_q2_get, _pycffirmware.quaternion_t_q2_set)
    q3 = property(_pycffirmware.quaternion_t_q3_get, _pycffirmware.quaternion_t_q3_set)
    x = property(_pycffirmware.quaternion_t_x_get, _pycffirmware.quaternion_t_x_set)
    y = property(_pycffirmware.quaternion_t_y_get, _pycffirmware.quaternion_t_y_set)
    z = property(_pycffirmware.quaternion_t_z_get, _pycffirmware.quaternion_t_z_set)
    w = property(_pycffirmware.quaternion_t_w_get, _pycffirmware.quaternion_t_w_set)

    def __init__(self):
        _pycffirmware.quaternion_t_swiginit(self, _pycffirmware.new_quaternion_t())
    __swig_destroy__ = _pycffirmware.delete_quaternion_t

# Register quaternion_t in _pycffirmware:
_pycffirmware.quaternion_t_swigregister(quaternion_t)
class tdoaMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    anchorPosition = property(_pycffirmware.tdoaMeasurement_t_anchorPosition_get, _pycffirmware.tdoaMeasurement_t_anchorPosition_set)
    distanceDiff = property(_pycffirmware.tdoaMeasurement_t_distanceDiff_get, _pycffirmware.tdoaMeasurement_t_distanceDiff_set)
    stdDev = property(_pycffirmware.tdoaMeasurement_t_stdDev_get, _pycffirmware.tdoaMeasurement_t_stdDev_set)

    def __init__(self):
        _pycffirmware.tdoaMeasurement_t_swiginit(self, _pycffirmware.new_tdoaMeasurement_t())
    __swig_destroy__ = _pycffirmware.delete_tdoaMeasurement_t

# Register tdoaMeasurement_t in _pycffirmware:
_pycffirmware.tdoaMeasurement_t_swigregister(tdoaMeasurement_t)
class baro_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pressure = property(_pycffirmware.baro_t_pressure_get, _pycffirmware.baro_t_pressure_set)
    temperature = property(_pycffirmware.baro_t_temperature_get, _pycffirmware.baro_t_temperature_set)
    asl = property(_pycffirmware.baro_t_asl_get, _pycffirmware.baro_t_asl_set)

    def __init__(self):
        _pycffirmware.baro_t_swiginit(self, _pycffirmware.new_baro_t())
    __swig_destroy__ = _pycffirmware.delete_baro_t

# Register baro_t in _pycffirmware:
_pycffirmware.baro_t_swigregister(baro_t)
class positionMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pycffirmware.positionMeasurement_t_x_get, _pycffirmware.positionMeasurement_t_x_set)
    y = property(_pycffirmware.positionMeasurement_t_y_get, _pycffirmware.positionMeasurement_t_y_set)
    z = property(_pycffirmware.positionMeasurement_t_z_get, _pycffirmware.positionMeasurement_t_z_set)
    pos = property(_pycffirmware.positionMeasurement_t_pos_get, _pycffirmware.positionMeasurement_t_pos_set)
    stdDev = property(_pycffirmware.positionMeasurement_t_stdDev_get, _pycffirmware.positionMeasurement_t_stdDev_set)

    def __init__(self):
        _pycffirmware.positionMeasurement_t_swiginit(self, _pycffirmware.new_positionMeasurement_t())
    __swig_destroy__ = _pycffirmware.delete_positionMeasurement_t

# Register positionMeasurement_t in _pycffirmware:
_pycffirmware.positionMeasurement_t_swigregister(positionMeasurement_t)
class poseMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pycffirmware.poseMeasurement_t_x_get, _pycffirmware.poseMeasurement_t_x_set)
    y = property(_pycffirmware.poseMeasurement_t_y_get, _pycffirmware.poseMeasurement_t_y_set)
    z = property(_pycffirmware.poseMeasurement_t_z_get, _pycffirmware.poseMeasurement_t_z_set)
    pos = property(_pycffirmware.poseMeasurement_t_pos_get, _pycffirmware.poseMeasurement_t_pos_set)
    quat = property(_pycffirmware.poseMeasurement_t_quat_get, _pycffirmware.poseMeasurement_t_quat_set)
    stdDevPos = property(_pycffirmware.poseMeasurement_t_stdDevPos_get, _pycffirmware.poseMeasurement_t_stdDevPos_set)
    stdDevQuat = property(_pycffirmware.poseMeasurement_t_stdDevQuat_get, _pycffirmware.poseMeasurement_t_stdDevQuat_set)

    def __init__(self):
        _pycffirmware.poseMeasurement_t_swiginit(self, _pycffirmware.new_poseMeasurement_t())
    __swig_destroy__ = _pycffirmware.delete_poseMeasurement_t

# Register poseMeasurement_t in _pycffirmware:
_pycffirmware.poseMeasurement_t_swigregister(poseMeasurement_t)
class distanceMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pycffirmware.distanceMeasurement_t_x_get, _pycffirmware.distanceMeasurement_t_x_set)
    y = property(_pycffirmware.distanceMeasurement_t_y_get, _pycffirmware.distanceMeasurement_t_y_set)
    z = property(_pycffirmware.distanceMeasurement_t_z_get, _pycffirmware.distanceMeasurement_t_z_set)
    pos = property(_pycffirmware.distanceMeasurement_t_pos_get, _pycffirmware.distanceMeasurement_t_pos_set)
    distance = property(_pycffirmware.distanceMeasurement_t_distance_get, _pycffirmware.distanceMeasurement_t_distance_set)
    stdDev = property(_pycffirmware.distanceMeasurement_t_stdDev_get, _pycffirmware.distanceMeasurement_t_stdDev_set)

    def __init__(self):
        _pycffirmware.distanceMeasurement_t_swiginit(self, _pycffirmware.new_distanceMeasurement_t())
    __swig_destroy__ = _pycffirmware.delete_distanceMeasurement_t

# Register distanceMeasurement_t in _pycffirmware:
_pycffirmware.distanceMeasurement_t_swigregister(distanceMeasurement_t)
class zDistance_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_pycffirmware.zDistance_t_timestamp_get, _pycffirmware.zDistance_t_timestamp_set)
    distance = property(_pycffirmware.zDistance_t_distance_get, _pycffirmware.zDistance_t_distance_set)

    def __init__(self):
        _pycffirmware.zDistance_t_swiginit(self, _pycffirmware.new_zDistance_t())
    __swig_destroy__ = _pycffirmware.delete_zDistance_t

# Register zDistance_t in _pycffirmware:
_pycffirmware.zDistance_t_swigregister(zDistance_t)
class sensorData_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    acc = property(_pycffirmware.sensorData_t_acc_get, _pycffirmware.sensorData_t_acc_set)
    gyro = property(_pycffirmware.sensorData_t_gyro_get, _pycffirmware.sensorData_t_gyro_set)
    mag = property(_pycffirmware.sensorData_t_mag_get, _pycffirmware.sensorData_t_mag_set)
    baro = property(_pycffirmware.sensorData_t_baro_get, _pycffirmware.sensorData_t_baro_set)
    interruptTimestamp = property(_pycffirmware.sensorData_t_interruptTimestamp_get, _pycffirmware.sensorData_t_interruptTimestamp_set)

    def __init__(self):
        _pycffirmware.sensorData_t_swiginit(self, _pycffirmware.new_sensorData_t())
    __swig_destroy__ = _pycffirmware.delete_sensorData_t

# Register sensorData_t in _pycffirmware:
_pycffirmware.sensorData_t_swigregister(sensorData_t)
class state_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    attitude = property(_pycffirmware.state_t_attitude_get, _pycffirmware.state_t_attitude_set)
    attitudeQuaternion = property(_pycffirmware.state_t_attitudeQuaternion_get, _pycffirmware.state_t_attitudeQuaternion_set)
    position = property(_pycffirmware.state_t_position_get, _pycffirmware.state_t_position_set)
    velocity = property(_pycffirmware.state_t_velocity_get, _pycffirmware.state_t_velocity_set)
    acc = property(_pycffirmware.state_t_acc_get, _pycffirmware.state_t_acc_set)

    def __init__(self):
        _pycffirmware.state_t_swiginit(self, _pycffirmware.new_state_t())
    __swig_destroy__ = _pycffirmware.delete_state_t

# Register state_t in _pycffirmware:
_pycffirmware.state_t_swigregister(state_t)
class control_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    roll = property(_pycffirmware.control_t_roll_get, _pycffirmware.control_t_roll_set)
    pitch = property(_pycffirmware.control_t_pitch_get, _pycffirmware.control_t_pitch_set)
    yaw = property(_pycffirmware.control_t_yaw_get, _pycffirmware.control_t_yaw_set)
    thrust = property(_pycffirmware.control_t_thrust_get, _pycffirmware.control_t_thrust_set)

    def __init__(self):
        _pycffirmware.control_t_swiginit(self, _pycffirmware.new_control_t())
    __swig_destroy__ = _pycffirmware.delete_control_t

# Register control_t in _pycffirmware:
_pycffirmware.control_t_swigregister(control_t)
modeDisable = _pycffirmware.modeDisable
modeAbs = _pycffirmware.modeAbs
modeVelocity = _pycffirmware.modeVelocity
class setpoint_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_pycffirmware.setpoint_t_timestamp_get, _pycffirmware.setpoint_t_timestamp_set)
    attitude = property(_pycffirmware.setpoint_t_attitude_get, _pycffirmware.setpoint_t_attitude_set)
    attitudeRate = property(_pycffirmware.setpoint_t_attitudeRate_get, _pycffirmware.setpoint_t_attitudeRate_set)
    attitudeQuaternion = property(_pycffirmware.setpoint_t_attitudeQuaternion_get, _pycffirmware.setpoint_t_attitudeQuaternion_set)
    thrust = property(_pycffirmware.setpoint_t_thrust_get, _pycffirmware.setpoint_t_thrust_set)
    position = property(_pycffirmware.setpoint_t_position_get, _pycffirmware.setpoint_t_position_set)
    velocity = property(_pycffirmware.setpoint_t_velocity_get, _pycffirmware.setpoint_t_velocity_set)
    acceleration = property(_pycffirmware.setpoint_t_acceleration_get, _pycffirmware.setpoint_t_acceleration_set)
    velocity_body = property(_pycffirmware.setpoint_t_velocity_body_get, _pycffirmware.setpoint_t_velocity_body_set)
    mode = property(_pycffirmware.setpoint_t_mode_get)

    def __init__(self):
        _pycffirmware.setpoint_t_swiginit(self, _pycffirmware.new_setpoint_t())
    __swig_destroy__ = _pycffirmware.delete_setpoint_t

# Register setpoint_t in _pycffirmware:
_pycffirmware.setpoint_t_swigregister(setpoint_t)
class setpoint_s_mode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pycffirmware.setpoint_s_mode_x_get, _pycffirmware.setpoint_s_mode_x_set)
    y = property(_pycffirmware.setpoint_s_mode_y_get, _pycffirmware.setpoint_s_mode_y_set)
    z = property(_pycffirmware.setpoint_s_mode_z_get, _pycffirmware.setpoint_s_mode_z_set)
    roll = property(_pycffirmware.setpoint_s_mode_roll_get, _pycffirmware.setpoint_s_mode_roll_set)
    pitch = property(_pycffirmware.setpoint_s_mode_pitch_get, _pycffirmware.setpoint_s_mode_pitch_set)
    yaw = property(_pycffirmware.setpoint_s_mode_yaw_get, _pycffirmware.setpoint_s_mode_yaw_set)
    quat = property(_pycffirmware.setpoint_s_mode_quat_get, _pycffirmware.setpoint_s_mode_quat_set)

    def __init__(self):
        _pycffirmware.setpoint_s_mode_swiginit(self, _pycffirmware.new_setpoint_s_mode())
    __swig_destroy__ = _pycffirmware.delete_setpoint_s_mode

# Register setpoint_s_mode in _pycffirmware:
_pycffirmware.setpoint_s_mode_swigregister(setpoint_s_mode)
class estimate_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_pycffirmware.estimate_t_timestamp_get, _pycffirmware.estimate_t_timestamp_set)
    position = property(_pycffirmware.estimate_t_position_get, _pycffirmware.estimate_t_position_set)

    def __init__(self):
        _pycffirmware.estimate_t_swiginit(self, _pycffirmware.new_estimate_t())
    __swig_destroy__ = _pycffirmware.delete_estimate_t

# Register estimate_t in _pycffirmware:
_pycffirmware.estimate_t_swigregister(estimate_t)
class setpointZ_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    z = property(_pycffirmware.setpointZ_t_z_get, _pycffirmware.setpointZ_t_z_set)
    isUpdate = property(_pycffirmware.setpointZ_t_isUpdate_get, _pycffirmware.setpointZ_t_isUpdate_set)

    def __init__(self):
        _pycffirmware.setpointZ_t_swiginit(self, _pycffirmware.new_setpointZ_t())
    __swig_destroy__ = _pycffirmware.delete_setpointZ_t

# Register setpointZ_t in _pycffirmware:
_pycffirmware.setpointZ_t_swigregister(setpointZ_t)
class flowMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_pycffirmware.flowMeasurement_t_timestamp_get, _pycffirmware.flowMeasurement_t_timestamp_set)
    dpixelx = property(_pycffirmware.flowMeasurement_t_dpixelx_get, _pycffirmware.flowMeasurement_t_dpixelx_set)
    dpixely = property(_pycffirmware.flowMeasurement_t_dpixely_get, _pycffirmware.flowMeasurement_t_dpixely_set)
    dpixel = property(_pycffirmware.flowMeasurement_t_dpixel_get, _pycffirmware.flowMeasurement_t_dpixel_set)
    stdDevX = property(_pycffirmware.flowMeasurement_t_stdDevX_get, _pycffirmware.flowMeasurement_t_stdDevX_set)
    stdDevY = property(_pycffirmware.flowMeasurement_t_stdDevY_get, _pycffirmware.flowMeasurement_t_stdDevY_set)
    dt = property(_pycffirmware.flowMeasurement_t_dt_get, _pycffirmware.flowMeasurement_t_dt_set)

    def __init__(self):
        _pycffirmware.flowMeasurement_t_swiginit(self, _pycffirmware.new_flowMeasurement_t())
    __swig_destroy__ = _pycffirmware.delete_flowMeasurement_t

# Register flowMeasurement_t in _pycffirmware:
_pycffirmware.flowMeasurement_t_swigregister(flowMeasurement_t)
class tofMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_pycffirmware.tofMeasurement_t_timestamp_get, _pycffirmware.tofMeasurement_t_timestamp_set)
    distance = property(_pycffirmware.tofMeasurement_t_distance_get, _pycffirmware.tofMeasurement_t_distance_set)
    stdDev = property(_pycffirmware.tofMeasurement_t_stdDev_get, _pycffirmware.tofMeasurement_t_stdDev_set)

    def __init__(self):
        _pycffirmware.tofMeasurement_t_swiginit(self, _pycffirmware.new_tofMeasurement_t())
    __swig_destroy__ = _pycffirmware.delete_tofMeasurement_t

# Register tofMeasurement_t in _pycffirmware:
_pycffirmware.tofMeasurement_t_swigregister(tofMeasurement_t)
class heightMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_pycffirmware.heightMeasurement_t_timestamp_get, _pycffirmware.heightMeasurement_t_timestamp_set)
    height = property(_pycffirmware.heightMeasurement_t_height_get, _pycffirmware.heightMeasurement_t_height_set)
    stdDev = property(_pycffirmware.heightMeasurement_t_stdDev_get, _pycffirmware.heightMeasurement_t_stdDev_set)

    def __init__(self):
        _pycffirmware.heightMeasurement_t_swiginit(self, _pycffirmware.new_heightMeasurement_t())
    __swig_destroy__ = _pycffirmware.delete_heightMeasurement_t

# Register heightMeasurement_t in _pycffirmware:
_pycffirmware.heightMeasurement_t_swigregister(heightMeasurement_t)
class yawErrorMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_pycffirmware.yawErrorMeasurement_t_timestamp_get, _pycffirmware.yawErrorMeasurement_t_timestamp_set)
    yawError = property(_pycffirmware.yawErrorMeasurement_t_yawError_get, _pycffirmware.yawErrorMeasurement_t_yawError_set)
    stdDev = property(_pycffirmware.yawErrorMeasurement_t_stdDev_get, _pycffirmware.yawErrorMeasurement_t_stdDev_set)

    def __init__(self):
        _pycffirmware.yawErrorMeasurement_t_swiginit(self, _pycffirmware.new_yawErrorMeasurement_t())
    __swig_destroy__ = _pycffirmware.delete_yawErrorMeasurement_t

# Register yawErrorMeasurement_t in _pycffirmware:
_pycffirmware.yawErrorMeasurement_t_swigregister(yawErrorMeasurement_t)
RATE_1000_HZ = _pycffirmware.RATE_1000_HZ
RATE_500_HZ = _pycffirmware.RATE_500_HZ
RATE_250_HZ = _pycffirmware.RATE_250_HZ
RATE_100_HZ = _pycffirmware.RATE_100_HZ
RATE_50_HZ = _pycffirmware.RATE_50_HZ
RATE_25_HZ = _pycffirmware.RATE_25_HZ
RATE_MAIN_LOOP = _pycffirmware.RATE_MAIN_LOOP
ATTITUDE_RATE = _pycffirmware.ATTITUDE_RATE
POSITION_RATE = _pycffirmware.POSITION_RATE
IIR_SHIFT = _pycffirmware.IIR_SHIFT

def iirLPFilterSingle(_in, attenuation, filt):
    return _pycffirmware.iirLPFilterSingle(_in, attenuation, filt)
class lpf2pData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a1 = property(_pycffirmware.lpf2pData_a1_get, _pycffirmware.lpf2pData_a1_set)
    a2 = property(_pycffirmware.lpf2pData_a2_get, _pycffirmware.lpf2pData_a2_set)
    b0 = property(_pycffirmware.lpf2pData_b0_get, _pycffirmware.lpf2pData_b0_set)
    b1 = property(_pycffirmware.lpf2pData_b1_get, _pycffirmware.lpf2pData_b1_set)
    b2 = property(_pycffirmware.lpf2pData_b2_get, _pycffirmware.lpf2pData_b2_set)
    delay_element_1 = property(_pycffirmware.lpf2pData_delay_element_1_get, _pycffirmware.lpf2pData_delay_element_1_set)
    delay_element_2 = property(_pycffirmware.lpf2pData_delay_element_2_get, _pycffirmware.lpf2pData_delay_element_2_set)

    def __init__(self):
        _pycffirmware.lpf2pData_swiginit(self, _pycffirmware.new_lpf2pData())
    __swig_destroy__ = _pycffirmware.delete_lpf2pData

# Register lpf2pData in _pycffirmware:
_pycffirmware.lpf2pData_swigregister(lpf2pData)

def lpf2pInit(lpfData, sample_freq, cutoff_freq):
    return _pycffirmware.lpf2pInit(lpfData, sample_freq, cutoff_freq)

def lpf2pSetCutoffFreq(lpfData, sample_freq, cutoff_freq):
    return _pycffirmware.lpf2pSetCutoffFreq(lpfData, sample_freq, cutoff_freq)

def lpf2pApply(lpfData, sample):
    return _pycffirmware.lpf2pApply(lpfData, sample)

def lpf2pReset(lpfData, sample):
    return _pycffirmware.lpf2pReset(lpfData, sample)
class SecondOrderLowPass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_pycffirmware.SecondOrderLowPass_a_get, _pycffirmware.SecondOrderLowPass_a_set)
    b = property(_pycffirmware.SecondOrderLowPass_b_get, _pycffirmware.SecondOrderLowPass_b_set)
    i = property(_pycffirmware.SecondOrderLowPass_i_get, _pycffirmware.SecondOrderLowPass_i_set)
    o = property(_pycffirmware.SecondOrderLowPass_o_get, _pycffirmware.SecondOrderLowPass_o_set)

    def __init__(self):
        _pycffirmware.SecondOrderLowPass_swiginit(self, _pycffirmware.new_SecondOrderLowPass())
    __swig_destroy__ = _pycffirmware.delete_SecondOrderLowPass

# Register SecondOrderLowPass in _pycffirmware:
_pycffirmware.SecondOrderLowPass_swigregister(SecondOrderLowPass)

def init_second_order_low_pass(filter, tau, Q, sample_time, value):
    return _pycffirmware.init_second_order_low_pass(filter, tau, Q, sample_time, value)

def update_second_order_low_pass(filter, value):
    return _pycffirmware.update_second_order_low_pass(filter, value)

def get_second_order_low_pass(filter):
    return _pycffirmware.get_second_order_low_pass(filter)
class SecondOrderLowPass_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_pycffirmware.SecondOrderLowPass_int_a_get, _pycffirmware.SecondOrderLowPass_int_a_set)
    b = property(_pycffirmware.SecondOrderLowPass_int_b_get, _pycffirmware.SecondOrderLowPass_int_b_set)
    i = property(_pycffirmware.SecondOrderLowPass_int_i_get, _pycffirmware.SecondOrderLowPass_int_i_set)
    o = property(_pycffirmware.SecondOrderLowPass_int_o_get, _pycffirmware.SecondOrderLowPass_int_o_set)
    loop_gain = property(_pycffirmware.SecondOrderLowPass_int_loop_gain_get, _pycffirmware.SecondOrderLowPass_int_loop_gain_set)

    def __init__(self):
        _pycffirmware.SecondOrderLowPass_int_swiginit(self, _pycffirmware.new_SecondOrderLowPass_int())
    __swig_destroy__ = _pycffirmware.delete_SecondOrderLowPass_int

# Register SecondOrderLowPass_int in _pycffirmware:
_pycffirmware.SecondOrderLowPass_int_swigregister(SecondOrderLowPass_int)

def init_butterworth_2_low_pass(filter, tau, sample_time, value):
    return _pycffirmware.init_butterworth_2_low_pass(filter, tau, sample_time, value)

def update_butterworth_2_low_pass(filter, value):
    return _pycffirmware.update_butterworth_2_low_pass(filter, value)

def get_butterworth_2_low_pass(filter):
    return _pycffirmware.get_butterworth_2_low_pass(filter)
class Axis3i16(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pycffirmware.Axis3i16_x_get, _pycffirmware.Axis3i16_x_set)
    y = property(_pycffirmware.Axis3i16_y_get, _pycffirmware.Axis3i16_y_set)
    z = property(_pycffirmware.Axis3i16_z_get, _pycffirmware.Axis3i16_z_set)
    axis = property(_pycffirmware.Axis3i16_axis_get, _pycffirmware.Axis3i16_axis_set)

    def __init__(self):
        _pycffirmware.Axis3i16_swiginit(self, _pycffirmware.new_Axis3i16())
    __swig_destroy__ = _pycffirmware.delete_Axis3i16

# Register Axis3i16 in _pycffirmware:
_pycffirmware.Axis3i16_swigregister(Axis3i16)
class Axis3i32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pycffirmware.Axis3i32_x_get, _pycffirmware.Axis3i32_x_set)
    y = property(_pycffirmware.Axis3i32_y_get, _pycffirmware.Axis3i32_y_set)
    z = property(_pycffirmware.Axis3i32_z_get, _pycffirmware.Axis3i32_z_set)
    axis = property(_pycffirmware.Axis3i32_axis_get, _pycffirmware.Axis3i32_axis_set)

    def __init__(self):
        _pycffirmware.Axis3i32_swiginit(self, _pycffirmware.new_Axis3i32())
    __swig_destroy__ = _pycffirmware.delete_Axis3i32

# Register Axis3i32 in _pycffirmware:
_pycffirmware.Axis3i32_swigregister(Axis3i32)
class Axis3i64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pycffirmware.Axis3i64_x_get, _pycffirmware.Axis3i64_x_set)
    y = property(_pycffirmware.Axis3i64_y_get, _pycffirmware.Axis3i64_y_set)
    z = property(_pycffirmware.Axis3i64_z_get, _pycffirmware.Axis3i64_z_set)
    axis = property(_pycffirmware.Axis3i64_axis_get, _pycffirmware.Axis3i64_axis_set)

    def __init__(self):
        _pycffirmware.Axis3i64_swiginit(self, _pycffirmware.new_Axis3i64())
    __swig_destroy__ = _pycffirmware.delete_Axis3i64

# Register Axis3i64 in _pycffirmware:
_pycffirmware.Axis3i64_swigregister(Axis3i64)
class Axis3f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pycffirmware.Axis3f_x_get, _pycffirmware.Axis3f_x_set)
    y = property(_pycffirmware.Axis3f_y_get, _pycffirmware.Axis3f_y_set)
    z = property(_pycffirmware.Axis3f_z_get, _pycffirmware.Axis3f_z_set)
    axis = property(_pycffirmware.Axis3f_axis_get, _pycffirmware.Axis3f_axis_set)

    def __init__(self):
        _pycffirmware.Axis3f_swiginit(self, _pycffirmware.new_Axis3f())
    __swig_destroy__ = _pycffirmware.delete_Axis3f

# Register Axis3f in _pycffirmware:
_pycffirmware.Axis3f_swigregister(Axis3f)

def controllerPidInit():
    return _pycffirmware.controllerPidInit()

def controllerPidTest():
    return _pycffirmware.controllerPidTest()

def controllerPid(control, setpoint, sensors, state, tick):
    return _pycffirmware.controllerPid(control, setpoint, sensors, state, tick)

def controllerMellingerInit():
    return _pycffirmware.controllerMellingerInit()

def controllerMellingerTest():
    return _pycffirmware.controllerMellingerTest()

def controllerMellinger(control, setpoint, sensors, state, tick):
    return _pycffirmware.controllerMellinger(control, setpoint, sensors, state, tick)
NUM_TRAJECTORY_DEFINITIONS = _pycffirmware.NUM_TRAJECTORY_DEFINITIONS
CRTP_CHL_TRAJECTORY_TYPE_POLY4D = _pycffirmware.CRTP_CHL_TRAJECTORY_TYPE_POLY4D
CRTP_CHL_TRAJECTORY_TYPE_POLY4D_COMPRESSED = _pycffirmware.CRTP_CHL_TRAJECTORY_TYPE_POLY4D_COMPRESSED

def crtpCommanderHighLevelUpdateTime(time):
    return _pycffirmware.crtpCommanderHighLevelUpdateTime(time)

def crtpCommanderHighLevelInit():
    return _pycffirmware.crtpCommanderHighLevelInit()

def crtpCommanderHighLevelGetSetpoint(setpoint, state):
    return _pycffirmware.crtpCommanderHighLevelGetSetpoint(setpoint, state)

def crtpCommanderHighLevelTellState(state):
    return _pycffirmware.crtpCommanderHighLevelTellState(state)

def crtpCommanderHighLevelIsStopped():
    return _pycffirmware.crtpCommanderHighLevelIsStopped()

def crtpCommanderHighLevelTakeoff(absoluteHeight_m, duration_s):
    return _pycffirmware.crtpCommanderHighLevelTakeoff(absoluteHeight_m, duration_s)

def crtpCommanderHighLevelTakeoffWithVelocity(height_m, velocity_m_s, relative):
    return _pycffirmware.crtpCommanderHighLevelTakeoffWithVelocity(height_m, velocity_m_s, relative)

def crtpCommanderHighLevelTakeoffYaw(absoluteHeight_m, duration_s, yaw):
    return _pycffirmware.crtpCommanderHighLevelTakeoffYaw(absoluteHeight_m, duration_s, yaw)

def crtpCommanderHighLevelLand(absoluteHeight_m, duration_s):
    return _pycffirmware.crtpCommanderHighLevelLand(absoluteHeight_m, duration_s)

def crtpCommanderHighLevelLandWithVelocity(height_m, velocity_m_s, relative):
    return _pycffirmware.crtpCommanderHighLevelLandWithVelocity(height_m, velocity_m_s, relative)

def crtpCommanderHighLevelLandYaw(absoluteHeight_m, duration_s, yaw):
    return _pycffirmware.crtpCommanderHighLevelLandYaw(absoluteHeight_m, duration_s, yaw)

def crtpCommanderHighLevelStop():
    return _pycffirmware.crtpCommanderHighLevelStop()

def crtpCommanderHighLevelGoTo(x, y, z, yaw, duration_s, relative):
    return _pycffirmware.crtpCommanderHighLevelGoTo(x, y, z, yaw, duration_s, relative)

def crtpCommanderHighLevelIsTrajectoryDefined(trajectoryId):
    return _pycffirmware.crtpCommanderHighLevelIsTrajectoryDefined(trajectoryId)

def crtpCommanderHighLevelStartTrajectory(trajectoryId, timeScale, relative, reversed):
    return _pycffirmware.crtpCommanderHighLevelStartTrajectory(trajectoryId, timeScale, relative, reversed)

def crtpCommanderHighLevelDefineTrajectory(trajectoryId, type, offset, nPieces):
    return _pycffirmware.crtpCommanderHighLevelDefineTrajectory(trajectoryId, type, offset, nPieces)

def crtpCommanderHighLevelTrajectoryMemSize():
    return _pycffirmware.crtpCommanderHighLevelTrajectoryMemSize()

def crtpCommanderHighLevelWriteTrajectory(offset, length, data):
    return _pycffirmware.crtpCommanderHighLevelWriteTrajectory(offset, length, data)

def crtpCommanderHighLevelReadTrajectory(offset, length, destination):
    return _pycffirmware.crtpCommanderHighLevelReadTrajectory(offset, length, destination)

def crtpCommanderHighLevelIsTrajectoryFinished():
    return _pycffirmware.crtpCommanderHighLevelIsTrajectoryFinished()
class floatArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _pycffirmware.floatArray_swiginit(self, _pycffirmware.new_floatArray(nelements))
    __swig_destroy__ = _pycffirmware.delete_floatArray

    def __getitem__(self, index):
        return _pycffirmware.floatArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pycffirmware.floatArray___setitem__(self, index, value)

    def cast(self):
        return _pycffirmware.floatArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _pycffirmware.floatArray_frompointer(t)

# Register floatArray in _pycffirmware:
_pycffirmware.floatArray_swigregister(floatArray)

def poly4d_set(poly, dim, coef, val):
    return _pycffirmware.poly4d_set(poly, dim, coef, val)

def poly4d_get(poly, dim, coef):
    return _pycffirmware.poly4d_get(poly, dim, coef)

def pp_get_piece(pp, i):
    return _pycffirmware.pp_get_piece(pp, i)

def malloc_poly4d(size):
    return _pycffirmware.malloc_poly4d(size)

def vec2svec(v):
    return _pycffirmware.vec2svec(v)

def svec2vec(v):
    return _pycffirmware.svec2vec(v)

def collisionAvoidanceUpdateSetpointWrap(params, collisionState, nOthers, setpoint, sensorData, state):
    return _pycffirmware.collisionAvoidanceUpdateSetpointWrap(params, collisionState, nOthers, setpoint, sensorData, state)

import numpy as np


